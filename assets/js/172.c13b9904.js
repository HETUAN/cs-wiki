(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{640:function(t,a,s){"use strict";s.r(a);var r=s(29),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"队列定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列定义"}},[t._v("#")]),t._v(" 队列定义")]),t._v(" "),s("p",[t._v("同样也是操作受限的线性表，"),s("strong",[t._v("先进先出FIFO")]),t._v("，从队尾进队，从队头出队")]),t._v(" "),s("p",[t._v("队列分为：")]),t._v(" "),s("ul",[s("li",[t._v("顺序队列")]),t._v(" "),s("li",[t._v("循环队列")]),t._v(" "),s("li",[t._v("链式队列")]),t._v(" "),s("li",[t._v("双端队列")])]),t._v(" "),s("h2",{attrs:{id:"顺序队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顺序队列"}},[t._v("#")]),t._v(" 顺序队列")]),t._v(" "),s("ul",[s("li",[t._v("同样采用数组存储元素")]),t._v(" "),s("li",[t._v("队头指针指向第一个元素")]),t._v(" "),s("li",[s("strong",[t._v("队尾指针一般指向最后一个元素的下一个位置")])])]),t._v(" "),s("p",[t._v("进队：先送值到队尾，再将队尾指针+1")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("出队：先取出队头元素，再将队头指针+1")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("front"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nfront "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("顺序队列存在的问题")]),t._v(" ：会导致上溢出；是一种 "),s("strong",[t._v("假溢出")]),t._v(" ，在data数组中任然存在可以存放数组的位置")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20200505094012.png",alt:""}})]),t._v(" "),s("p",[t._v("解决方法：")]),t._v(" "),s("ul",[s("li",[t._v("建立一个足够大的存储空间以避免溢出，但这样做空间使用率低，浪费存储空间")]),t._v(" "),s("li",[t._v("移动元素：每当出队一个元素，就将移动队列中所有的已有元素向队头移动一个位置")]),t._v(" "),s("li",[t._v("循环队列：将队头和队尾看作是一个首尾相接的循环队列")])]),t._v(" "),s("h2",{attrs:{id:"循环队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环队列"}},[t._v("#")]),t._v(" 循环队列")]),t._v(" "),s("p",[s("strong",[t._v("弥补顺序队列的缺点")])]),t._v(" "),s("ul",[s("li",[t._v("初始/队空：Q.front = Q.rear (队空条件）")]),t._v(" "),s("li",[t._v("出队：Q.front = (Q.front+1) % maxsize (最大元素个数)")]),t._v(" "),s("li",[t._v("进队：Q.rear = (Q.rear+1) % maxsize")]),t._v(" "),s("li",[t._v("队列长度 = (Q.rear - Q.front + maxsize) % maxsize")]),t._v(" "),s("li",[t._v("队满：( "),s("strong",[t._v("牺牲一个单元来区分队空和队满")]),t._v(" ）(Q.rear + 1) % maxsize = Q.front")])]),t._v(" "),s("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1237282/1586069628893-2e862333-bb9c-439e-95c8-a4fddaed591d.png",alt:"img"}}),t._v(" "),s("h2",{attrs:{id:"链式队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链式队列"}},[t._v("#")]),t._v(" 链式队列")]),t._v(" "),s("p",[s("strong",[t._v("实际就是一个同时带有头指针和尾指针的单链表")])]),t._v(" "),s("p",[t._v("头指针指向队头结点，尾指针指向队尾结点（即单链表最后一个结点，与顺序存储有所不同）")]),t._v(" "),s("p",[t._v("适合于数据元素变动较大的情况，而且不存在队列满或者溢出的问题。")]),t._v(" "),s("ul",[s("li",[t._v("队空： Q.rear == Q.front == NULL")]),t._v(" "),s("li",[t._v("出队：（带头结点）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("LinkNode *p = Q.front->next;\nx = p->data;\nQ.front->next = p->next; //插入头节点之后\nif(Q.rear = p) //若原队列中只有一个结点，删除后变空，还需修改尾指针\n    Q.rear = Q.front;\nfree(p);\n")])])]),s("ul",[s("li",[t._v("进队：（带头节点）")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("LinkNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建新结点")]),t._v("\ns"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nQ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rear"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//插入到表尾")]),t._v("\nQ"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端队列"}},[t._v("#")]),t._v(" 双端队列")]),t._v(" "),s("p",[t._v("允许两端都进行入队和出队操作的队列")]),t._v(" "),s("ul",[s("li",[t._v("输出受限：有一端允许插入和删除；另一端只允许插入")]),t._v(" "),s("li",[t._v("输入受限：有一端允许插入和删除；另一端只允许删除")])]),t._v(" "),s("h2",{attrs:{id:"队列的应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列的应用"}},[t._v("#")]),t._v(" 队列的应用")]),t._v(" "),s("ul",[s("li",[t._v("层次遍历")]),t._v(" "),s("li",[t._v("计算机系统中的应用")]),t._v(" "),s("li",[t._v("解决主机与外部设备之间速度不匹配的问题（ex:打印机数据缓冲区中所存储的数据就是一个队列）")]),t._v(" "),s("li",[t._v("解决由多用户引起的资源竞争问题（CPU将请求按时间先后排成队列）")])])])}),[],!1,null,null,null);a.default=n.exports}}]);