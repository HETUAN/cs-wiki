(window.webpackJsonp=window.webpackJsonp||[]).push([[337],{805:function(t,v,_){"use strict";_.r(v);var s=_(29),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"string-的不可变真的是因为-final-吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#string-的不可变真的是因为-final-吗"}},[t._v("#")]),t._v(" String 的不可变真的是因为 final 吗？")]),t._v(" "),_("hr"),t._v(" "),_("p",[_("code",[t._v("String")]),t._v(" 为啥不可变？因为 "),_("code",[t._v("String")]),t._v(" 中的 char 数组被 final 修饰。这套回答相信各位已经背烂了，But 这并不正确！")]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("面试官：讲讲 "),_("code",[t._v("String")]),t._v("、"),_("code",[t._v("StringBuilder")]),t._v("、"),_("code",[t._v("StringBuffer")]),t._v(" 的区别")]),t._v(" "),_("li",[t._v("我："),_("code",[t._v("String")]),t._v(" 不可变，而 "),_("code",[t._v("StringBuilder")]),t._v(" 和 "),_("code",[t._v("StringBuffer")]),t._v(" 可变，叭叭叭 ......")]),t._v(" "),_("li",[t._v("面试官："),_("code",[t._v("String")]),t._v(" 为什么不可变？")]),t._v(" "),_("li",[t._v("我："),_("code",[t._v("String")]),t._v(" 被 "),_("code",[t._v("final")]),t._v(" 修饰，这说明 "),_("code",[t._v("String")]),t._v(" 不可继承；并且"),_("code",[t._v("String")]),t._v(" 中真正存储字符的地方是 char 数组，这个数组被 "),_("code",[t._v("final")]),t._v(" 修饰，所以 "),_("code",[t._v("String")]),t._v(" 不可变")]),t._v(" "),_("li",[t._v("面试官："),_("code",[t._v("String")]),t._v(" 的不可变真的是因为 "),_("code",[t._v("final")]),t._v(" 吗？")]),t._v(" "),_("li",[t._v("我：是.....是的吧")]),t._v(" "),_("li",[t._v("面试官：OK，你这边还有什么问题吗？")]),t._v(" "),_("li",[t._v("我：卒......")])])]),t._v(" "),_("h3",{attrs:{id:"什么是不可变"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是不可变"}},[t._v("#")]),t._v(" 什么是不可变？")]),t._v(" "),_("p",[t._v("《Effective Java》中对于不可变对象（Immutable Object）的定义是："),_("strong",[t._v("对象一旦被创建后，对象所有的状态及属性在其生命周期内不会发生任何变化")]),t._v("。这就意味着，一旦我们将一个对象分配给一个变量，就无法再通过任何方式更改对象的状态了。")]),t._v(" "),_("p",[_("code",[t._v("String")]),t._v(' 不可变的表现就是当我们试图对一个已有的对象 "abcd" 赋值为 "abcde"，'),_("code",[t._v("String")]),t._v(" 会新创建一个对象：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210402224733.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"string-为什么不可变"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#string-为什么不可变"}},[t._v("#")]),t._v(" String 为什么不可变？")]),t._v(" "),_("p",[_("code",[t._v("String")]),t._v(" 用 final 修饰 char 数组，这个数组无法被修改，这么说确实没啥问题。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210402215240.png",alt:""}})]),t._v(" "),_("p",[t._v("但是！！！"),_("strong",[t._v("这个无法被修改仅仅是指引用地址不可被修改（也就是说栈里面的这个叫 value 的引用地址不可变，编译器不允许我们把 value 指向堆中的另一个地址），并不代表存储在堆中的这个数组本身的内容不可变")]),t._v("。举个例子：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210402215319.png",alt:""}})]),t._v(" "),_("p",[t._v("如果我们直接修改数组中的元素，是完全 OK 的：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210402215616.png",alt:""}})]),t._v(" "),_("p",[t._v("那既然我们说 "),_("code",[t._v("String")]),t._v(" 是不可变的，那显然"),_("strong",[t._v("仅仅靠 final 是远远不够的")]),t._v("：")]),t._v(" "),_("p",[t._v("1）首先，char 数组是 private 的，并且 "),_("code",[t._v("String")]),t._v(" 类没有对外提供修改这个数组的方法，所以它初始化之后外界没有有效的手段去改变它；")]),t._v(" "),_("p",[t._v("2）其次，"),_("code",[t._v("String")]),t._v(" 类被 final 修饰的，也就是不可继承，避免被他人继承后破坏；")]),t._v(" "),_("p",[t._v("3）最重要的！是因为 Java 作者在 "),_("code",[t._v("String")]),t._v(" 的所有方法里面，都很小心地避免去修改了 char 数组中的数据，"),_("strong",[t._v("涉及到对 char 数组中数据进行修改的操作全部都会重新创建一个 "),_("code",[t._v("String")]),t._v(" 对象")]),t._v("。你可以随便翻个源码看看来验证这个说法，比如 substring 方法：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210406202957.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"为什么要设计成不可变的呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要设计成不可变的呢"}},[t._v("#")]),t._v(" 为什么要设计成不可变的呢？")]),t._v(" "),_("p",[t._v("1）首先，"),_("strong",[t._v("字符串常量池的需要")]),t._v("。")]),t._v(" "),_("p",[t._v("我们来回顾一下字符串常量池的定义：大量频繁的创建字符串，将会极大程度的影响程序的性能。为此，JVM 为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化：")]),t._v(" "),_("ul",[_("li",[t._v("为字符串开辟了一个字符串常量池 String Pool，可以理解为缓存区")]),t._v(" "),_("li",[t._v("创建字符串常量时，首先检查字符串常量池中是否存在该字符串")]),t._v(" "),_("li",[t._v("若字符串常量池中存在该字符串，则直接返回该引用实例，无需重新实例化；若不存在，则实例化该字符串并放入池中。")])]),t._v(" "),_("p",[t._v("如下面的代码所示，堆内存中只会创建一个 "),_("code",[t._v("String")]),t._v(" 对象：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218204914.png",alt:""}})]),t._v(" "),_("p",[t._v("假设 "),_("code",[t._v("String")]),t._v(" 允许被改变，那如果我们修改了 str2 的内容为 good，那么 str1 也会被修改，显然这不是我们想要看见的结果。")]),t._v(" "),_("p",[t._v("2）另外一点也比较容易想到，"),_("code",[t._v("String")]),t._v(" 被设计成不可变就是为了"),_("strong",[t._v("安全")]),t._v("。")]),t._v(" "),_("p",[t._v("作为最基础最常用的数据类型，"),_("code",[t._v("String")]),t._v(" 被许多 Java 类库用来作为参数，如果 "),_("code",[t._v("String")]),t._v(" 不是固定不变的，将会引起各种安全隐患。")]),t._v(" "),_("p",[t._v("举个例子，我们来看看将可变的字符串 "),_("code",[t._v("StringBuilder")]),t._v(" 存入 "),_("code",[t._v("HashSet")]),t._v(" 的场景：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210406210219.png",alt:""}})]),t._v(" "),_("p",[t._v("我们把可变字符串 s3 指向了 s1 的地址，然后改变 s3 的值，由于 "),_("code",[t._v("StringBuilder")]),t._v(" 没有像 "),_("code",[t._v("String")]),t._v(" 那样设计成不可变的，所以 s3 就会直接在 s1 的地址上进行修改，导致 s1 的值也发生了改变。于是，糟糕的事情发生了，"),_("code",[t._v("HashSet")]),t._v(" 中出现了两个相等的元素，破坏了 "),_("code",[t._v("HashSet")]),t._v(" 的不包含重复元素的原则。")]),t._v(" "),_("p",[t._v("另外，在多线程环境下，众所周知，多个线程同时想要修改同一个资源，是存在危险的，而 "),_("code",[t._v("String")]),t._v(" 作为不可变对象，不能被修改，并且多个线程同时读同一个资源，是完全没有问题的，所以 "),_("code",[t._v("String")]),t._v(" 是线程安全的。")]),t._v(" "),_("h3",{attrs:{id:"string-真的不可变吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#string-真的不可变吗"}},[t._v("#")]),t._v(" String 真的不可变吗？")]),t._v(" "),_("p",[t._v("想要改变 "),_("code",[t._v("String")]),t._v(" 无非就是改变 char 数组 value 的内容，而 value 是私有属性，那么在 Java 中有没有某种手段可以访问类的私有属性呢？")]),t._v(" "),_("p",[t._v("没错，就是反射，使用反射可以直接修改 char 数组中的内容，当然，一般来说我们不这么做。")]),t._v(" "),_("p",[t._v("看下面代码：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210406204010.png",alt:""}})]),t._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("总结来说，"),_("strong",[t._v("并不是因为 char 数组是 "),_("code",[t._v("final")]),t._v(" 才导致 "),_("code",[t._v("String")]),t._v(" 的不可变，而是为了把 "),_("code",[t._v("String")]),t._v(" 设计成不可变才把 char 数组设置为 "),_("code",[t._v("final")]),t._v(" 的")]),t._v("。下面是一些创建不可变对象的简单策略，当然，也并非所有不可变类都完全遵守这些规则：")]),t._v(" "),_("ul",[_("li",[t._v("不要提供 setter 方法（包括修改字段的方法和修改字段引用对象的方法）；")]),t._v(" "),_("li",[t._v("将类的所有字段定义为 final、private 的；")]),t._v(" "),_("li",[t._v("不允许子类重写方法。简单的办法是将类声明为 final，更好的方法是将构造函数声明为私有的，通过工厂方法创建对象；")]),t._v(" "),_("li",[t._v("如果类的字段是对可变对象的引用，不允许修改被引用对象。")])])])}),[],!1,null,null,null);v.default=a.exports}}]);