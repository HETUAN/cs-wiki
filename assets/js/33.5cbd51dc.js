(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{502:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"📃-题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📃-题目描述"}},[t._v("#")]),t._v(" 📃 题目描述")]),t._v(" "),a("p",[t._v("题目链接：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/WGki4K/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指 Offer II 004. 只出现一次的数字 - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("137. 只出现一次的数字 II - 力扣（LeetCode） (leetcode-cn.com)"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("给你一个整数数组 nums ，除某个元素仅出现 一次 外，"),a("strong",[t._v("其余每个元素都恰出现 三次")]),t._v(" 。请你找出并返回那个只出现了一次的元素。")]),t._v(" "),a("p",[t._v("示例 1：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：nums = [2,2,3,2]\n输出：3\n")])])]),a("p",[t._v("示例 2：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("输入：nums = [0,1,0,1,0,1,100]\n输出：100\n")])])]),a("h2",{attrs:{id:"🔔-解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔔-解题思路"}},[t._v("#")]),t._v(" 🔔 解题思路")]),t._v(" "),a("p",[t._v("首先需要了解下左移右移的知识，可以看这篇博客："),a("a",{attrs:{href:"https://blog.csdn.net/weixin_45309916/article/details/107928052",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单理解二进制的左移和右移（通俗易懂）_一只青木呀的博客-CSDN博客_二进制左移"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("二进制左移几位就是后面加几个 0，前面去掉几位（左移一位相当于乘 2）")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20220401150351.png"}}),t._v(" "),a("p",[t._v("右移几位就是在二进制的前面加几位（正数加 0，负数加 1），后面去掉几位（右移一位相当于除2）")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20220401150358.png",alt:"image-20220401150358018"}}),t._v(" "),a("br"),t._v(" "),a("p",[t._v("在这个题目中只有一个数字出现了一次，其他数字出现了3次。相同的3个数字异或的结果是数字本身，但是将数组中所有数字进行异或运算并不能消除出现3次的数字。因此，需要想其他办法。")]),t._v(" "),a("p",[t._v("一个整数是由 32 个 0 或 1 组成的。我们可以将数组中所有数字的同一位置的数位相加。"),a("strong",[t._v("如果将出现 3 次的数字单独拿出来，那么这些出现了 3 次的数字的任意第 i 个数位之和都能被 3 整除(二进制中每个数位只有 0 和 1 的可能嘛)")]),t._v("。")]),t._v(" "),a("p",[t._v("因此")]),t._v(" "),a("ul",[a("li",[t._v("如果数组中所有数字的第 i 个数位相加之和能被 3 整除，那么只出现一次的数字的第 i 个数位一定是 0；")]),t._v(" "),a("li",[t._v("如果数组中所有数字的第 i 个数位相加之和被 3 除余 1，那么只出现一次的数字的第 i 个数位一定是 1")])]),t._v(" "),a("p",[t._v("这样只出现一次的任意第 i 个数位可以由数组中所有数字的第 i 个数位之和推算出来")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("singleNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" bitNums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 num 看成二进制进行处理")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 1 相 & 可以保存最后一位数，前面其他数位全部清 0")]),t._v("\n                bitNums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bitNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bitNums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" bitNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("代码 "),a("code",[t._v("(num >> (31 - i)) & 1")]),t._v("用来得到整数 num 的二进制形式中从左数起第 i 个数位(从 0 开始计数)。")]),t._v(" "),a("p",[t._v("整数 num 先被右移 31-i 位，原来从左数起第 i 个数位右移之后位于最右边。")]),t._v(" "),a("p",[t._v("接下来与 1 做位与运算。整数 1 除了最右边一位是1，其余数位都是0，它与任何一个数字做位与运算的结果都是保留数字的最右边一位，其他数位都被清零。")]),t._v(" "),a("p",[t._v("如果整数 num 从左数起第 i 个数位是1，那么 "),a("code",[t._v("(num >> (31 - i)) & 1")]),t._v(" 的最终结果就是 1；否则最终结果为 0。")]),t._v(" "),a("p",[t._v("举个例子，求 8 位二进制整数01101100从左数起的第 2 个（从 0 开始计数）数位。我们先将 01101100 右移5位（7-2=5）得到00000011，再将它和00000001做位与运算，结果为00000001，即1。8 位二进制整数 01101100 从左边数起的第 2 个数位的确是1。")]),t._v(" "),a("h2",{attrs:{id:"💥-复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#💥-复杂度分析"}},[t._v("#")]),t._v(" 💥 复杂度分析")]),t._v(" "),a("ul",[a("li",[t._v("空间复杂度：")]),t._v(" "),a("li",[t._v("时间复杂度：")])])])}),[],!1,null,null,null);s.default=e.exports}}]);