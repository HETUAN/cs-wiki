(window.webpackJsonp=window.webpackJsonp||[]).push([[334],{802:function(t,a,s){"use strict";s.r(a);var n=s(29),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-小白成长记-·-第-6-篇「为什么说要慎用继承-优先使用组合」"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-小白成长记-·-第-6-篇「为什么说要慎用继承-优先使用组合」"}},[t._v("#")]),t._v(" Java 小白成长记 · 第 6 篇「为什么说要慎用继承，优先使用组合」")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_0-前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0-前言"}},[t._v("#")]),t._v(" 0. 前言")]),t._v(" "),s("p",[t._v("在代码的编写过程中，避免冗余代码的出现是非常重要的，大段大段的重复代码必然不能够称之为优雅。所谓减少冗余代码，通俗来说就是实现一段代码多处使用，"),s("strong",[t._v("在不污染源代码的前提下使用现存代码")]),t._v("，也就是代码"),s("strong",[t._v("复用")]),t._v("，避免重复编写。然而，对于像 C 语言等面向过程的语言来说，复用通常指的仅仅只是"),s("strong",[t._v("复制代码")]),t._v("，任何语言都可通过简单的复制来达到代码复用的目的，显然这样做的效果并不好。")]),t._v(" "),s("p",[t._v("Java 作为一种面向对象的语言，围绕"),s("strong",[t._v("类")]),t._v("来解决冗余代码的问题。我们可以直接使用别人构建的代码，而非创建新类、重新开始或者无脑的复制代码。")]),t._v(" "),s("p",[t._v("Java 中实现代码复用的手段有两种，标题也写的很清楚：")]),t._v(" "),s("ul",[s("li",[t._v("第一种手段：组合")]),t._v(" "),s("li",[t._v("第二种手段：继承")])]),t._v(" "),s("p",[t._v("本文会先分别讲解什么是继承，什么是组合，最后再揭开标题的谜底 — "),s("strong",[t._v("为什么说要慎用继承，优先使用组合")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_1-什么是组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是组合"}},[t._v("#")]),t._v(" 1. 什么是组合")]),t._v(" "),s("p",[t._v("所谓组合（Composition），就是"),s("strong",[t._v("在新类中创建现有类的对象")]),t._v("。不管是继承和组合，都允许在新类中直接复用旧类的"),s("strong",[t._v("公有")]),t._v("方法或字段。")]),t._v(" "),s("p",[t._v("举个例子，比如说所有的动物都拥有心跳 beat 和呼吸 breath，我们将心跳和呼吸抽象成一个类 "),s("code",[t._v("Animal")]),t._v("，这个类就称为现有类，现在有一个动物：猫 "),s("code",[t._v("Cat")]),t._v("，那么 "),s("code",[t._v("Cat")]),t._v(" 这个类就称为新类，"),s("strong",[t._v("将 "),s("code",[t._v("Animal")]),t._v(" 类的对象嵌入 "),s("code",[t._v("Cat")]),t._v(" 这个类中，"),s("code",[t._v("Cat")]),t._v(" 就具有了心跳和呼吸")]),t._v("，这就使用了组合。")]),t._v(" "),s("p",[t._v("通俗来说 "),s("code",[t._v("Cat")]),t._v(" 拥有 "),s("code",[t._v("Animal")]),t._v("，即 "),s("strong",[t._v("has-a")]),t._v(" 的关系。以后再有其他动物的出现，比如狗 "),s("code",[t._v("Dog")]),t._v("，也同样将 "),s("code",[t._v("Animal")]),t._v(" 类嵌入其中使其具有心跳和呼吸即可，不必重复的写心跳和呼吸方法的代码。这便是组合的全部意义。UML 类图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129195030.png",alt:""}})]),t._v(" "),s("p",[t._v("代码示例如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My heart is beating"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m breathing"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("Cat")]),t._v(" 拥有 "),s("code",[t._v("Animal")]),t._v("，不仅拥有了呼吸和心跳功能，并且还可以添加自己的新属性，使其具有新的方法：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组合")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用构造函数初始化成员变量")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过调用成员变量的固有方法使新类具有相同的功能")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tanimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过调用成员变量的固有方法使新类具有相同的功能")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tanimal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为新类增加新的方法")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样，"),s("code",[t._v("Cat")]),t._v(" 这个新类拥有了三种方法：breath / beat / run：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式创建被组合的对象实例 animal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以 animal 为基础组合出新对象实例 cat")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" cat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bird")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新对象实例 cat 可以 breath()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新对象实例 cat 可以 beat()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新对象实例 cat 可以 run()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上便是组合实现复用的方式，"),s("code",[t._v("Cat")]),t._v(" 对象由 "),s("code",[t._v("Animal")]),t._v(" 对象组合而成，如上面的示例代码，在创建 "),s("code",[t._v("Cat")]),t._v(" 对象之前先创建 "),s("code",[t._v("Animal")]),t._v(" 对象，并利用这个 "),s("code",[t._v("Animal")]),t._v(" 对象来创建 "),s("code",[t._v("Cat")]),t._v(" 对象。")]),t._v(" "),s("p",[t._v("实际上，组合表示出来的是一种明确的"),s("strong",[t._v("整体-部分")]),t._v("的关系。而对于继承来说，是将某一个抽象的类，改造成能够适用于不同特定需求的类。")]),t._v(" "),s("h2",{attrs:{id:"_2-什么是继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是继承"}},[t._v("#")]),t._v(" 2. 什么是继承")]),t._v(" "),s("p",[t._v("还从上面的例子的入手，上面我们使用组合复用了 "),s("code",[t._v("Animal")]),t._v(" 类，事实上，也可以使用继承实现 "),s("code",[t._v("Animal")]),t._v(" 类的复用。")]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("Cat")]),t._v(" 和 "),s("code",[t._v("Animal")]),t._v("，我们还可以这样理解，"),s("code",[t._v("Cat")]),t._v(" "),s("strong",[t._v("是")]),t._v("一种 "),s("code",[t._v("Animal")]),t._v("，即 "),s("strong",[t._v("is-a")]),t._v(" 的关系。这样，"),s("code",[t._v("Cat")]),t._v(" 称为"),s("strong",[t._v("子类（派生类）")]),t._v("，"),s("code",[t._v("Animal")]),t._v("称为 "),s("code",[t._v("Cat")]),t._v(" 的"),s("strong",[t._v("父类（超类、基类）")]),t._v("。在组合中，新类 "),s("code",[t._v("Cat")]),t._v(" 访问旧类 "),s("code",[t._v("Animal")]),t._v(" 中的属性需要通过内嵌的旧类对象来调用，而对于继承来说，"),s("strong",[t._v("新类（子类）可以直接调用旧类（父类）的公有属性")]),t._v("。UML 类图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129201201.png",alt:""}})]),t._v(" "),s("p",[t._v("Java 中的继承关系使用关键字 "),s("code",[t._v("extends")]),t._v(" 来标识，示例代码如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为新类增加新的方法")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("Cat")]),t._v(" 继承 "),s("code",[t._v("Animal")]),t._v(" 后，自动拥有了父类 "),s("code",[t._v("Animal")]),t._v(" 中的方法 "),s("code",[t._v("beat")]),t._v(" 和 "),s("code",[t._v("breath")]),t._v("，并可以直接调用，代码如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" cat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子类实例 cat 可以 breath()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子类实例 cat 可以 beat()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子类实例 cat 可以 run()")]),t._v("\ncat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上便是继承实现复用的方式，"),s("code",[t._v("Cat")]),t._v(" 继承自抽象的类 "),s("code",[t._v("Animal")]),t._v("，并将其改造成能够适用于某种特定需求的类。")]),t._v(" "),s("h2",{attrs:{id:"_3-方法覆盖-重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法覆盖-重写"}},[t._v("#")]),t._v(" 3. 方法覆盖 / 重写")]),t._v(" "),s("p",[t._v("子类继承父类后，不仅可以直接调用父类的方法，还可以对父类的方法进行重写，使其拥有自己的特征。仍然以上面的 "),s("code",[t._v("Cat")]),t._v(" 和 "),s("code",[t._v("Animal")]),t._v(" 为例，假设 "),s("code",[t._v("Cat")]),t._v(" 继承 "),s("code",[t._v("Animal")]),t._v(" 后，对 "),s("code",[t._v("Animal")]),t._v(" 原生的呼吸方法 "),s("code",[t._v("breath")]),t._v(" 很不满意，但是你不能不呼吸对吧，所以这个时候就可以直接对 "),s("code",[t._v("breath")]),t._v(" 方法的方法体进行重写。")]),t._v(" "),s("p",[s("strong",[t._v("注意，重写和重载不同")]),t._v("，在"),s("u",[t._v("Java 小白成长记第 4 篇")]),t._v("中我们说过，重载指的是两个方法具有相同的名字，但是不同的参数，而"),s("strong",[t._v("重写不仅方法名相同，参数列表和返回类型也相同")]),t._v("。示例代码如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写 breath 方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I\'m cat, "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("breath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("@Override")]),t._v(" 注解即表示方法重写，不过这个也可以不写，JVM 能够自动的识别方法覆盖。")]),t._v(" "),s("p",[t._v("上面这个方法输出的将是 I'm cat, I'm breathing，也就是说，在子类中可以使用 "),s("code",[t._v("super")]),t._v(" 关键字调用父类的方法。")]),t._v(" "),s("p",[t._v("另外，一定要注意的是："),s("strong",[t._v("在覆盖一个方法的时候，子类方法不能低于父类方法的可见性")]),t._v("。特别是， 如果超类方法是 "),s("code",[t._v("public")]),t._v(", 子类方法一定要声明为 "),s("code",[t._v("public")]),t._v("。常会发生这类错误：在声明子类方法的时候， 遗漏了 "),s("code",[t._v("public")]),t._v("修饰符。此时，编译器将会把它解释为试图提供更严格的访问权限：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20200718211413.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_4-子类的构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-子类的构造函数"}},[t._v("#")]),t._v(" 4. 子类的构造函数")]),t._v(" "),s("p",[t._v("现在，我们为父类 "),s("code",[t._v("Animal")]),t._v(" 添加一个私有字段 "),s("code",[t._v("age")]),t._v("，每个动物都有年龄嘛，当然，对于子类来说，这个私有字段它们是无法访问的。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新增一个私有字段")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父类的构造函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("同样的，我们规定在构造 "),s("code",[t._v("Cat")]),t._v(" 的时候，需要为其指定年龄 age 和猫耳的类型 earKind，这就需要使用子类的构造函数了：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" earKind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" earKind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("earKind "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" earKind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以看出，我们通过 "),s("code",[t._v("super(age)")]),t._v(" 调用了父类的构造函数为这个猫指定了年龄，这个同 "),s("code",[t._v("this")]),t._v(" 关键字一样，"),s("strong",[t._v("使用 "),s("code",[t._v("super")]),t._v("调用构造函数的语句必须是子类构造函数的第一条语句")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("如果子类的构造器没有显式地调用父类的构造器， 则将自动地调用父类默认的构造函数（无参构造函数）")]),t._v("。 如果超类没有无参构造函数， 并且在子类的构造器中又没有显式地调用超类的其他构造器，则 Java 编译器将报告错误。")])]),t._v(" "),s("p",[t._v("需要注意的是："),s("strong",[t._v("父类的构造函数总是先于子类的构造函数执行")]),t._v("。这点应该很好理解，你不能说先构造一个个猫出来，再给他添加呼吸和心跳对吧，你一定是先有呼吸和心跳，才有这个猫的。")]),t._v(" "),s("h2",{attrs:{id:"_5-向上转型和向下转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-向上转型和向下转型"}},[t._v("#")]),t._v(" 5. 向上转型和向下转型")]),t._v(" "),s("h3",{attrs:{id:"_1-向上转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-向上转型"}},[t._v("#")]),t._v(" ① 向上转型")]),t._v(" "),s("p",[t._v("继承最重要的方面不是为子类提供方法。它是子类与父类的一种关系。简而言之，上文我们也说过，这种关系可以表述为"),s("strong",[t._v("子类是父类的一种类型")]),t._v("。这种描述并非是解释继承的一种花哨方式，这是直接由语言支持的。下面例子展示了编译器是如何支持这一概念的：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" cat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向上转型 Cat->Animal")]),t._v("\n")])])]),s("p",[t._v("也就是说，"),s("strong",[t._v("程序中出现父类对象的任何地方都可以用子类对象置换")]),t._v("，这便是"),s("strong",[t._v("向上转型")]),t._v("。通过子类对象 (小范围) 实例化父类对象(大范围)，这种属于自动转换。事实上，这是"),s("strong",[t._v("多态")]),t._v("的一种体现。后续文章我们会详细讲解。")]),t._v(" "),s("p",[t._v("需要注意的是："),s("strong",[t._v("父类引用变量指向子类对象后，只能使用父类已声明的方法")]),t._v("，但方法如果被重写会执行子类的方法，如果方法未被重写那么将执行父类的方法。")]),t._v(" "),s("h3",{attrs:{id:"_2-向下转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-向下转型"}},[t._v("#")]),t._v(" ② 向下转型")]),t._v(" "),s("p",[t._v("不仅存在向上转型，还存在向下转型。正像有时候需要将浮点型数值 float 转换成整型数值 int 一样，有时候也可能需要"),s("strong",[t._v("将某个父类的对象引用转换成子类的对象引用，调用一些子类特有而父类没有的方法")]),t._v("。对象向下转型的语法与数值表达式的类型转换类似，仅需要用一对圆括号将目标类名括起来，并放置在需要转换的对象引用之前就可以了。例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),t._v(" animal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向上转型 Cat->Animal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" cat "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向下转型 Animal->Cat，animal 的实质还是指向 Cat")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129222050.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_6-受保护访问-protected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-受保护访问-protected"}},[t._v("#")]),t._v(" 6. 受保护访问 protected")]),t._v(" "),s("p",[t._v("大家都知道，最好将类中的域标记为 "),s("code",[t._v("private")]),t._v(", 而方法标记为 "),s("code",[t._v("public")]),t._v("。任何声明为 "),s("code",[t._v("private")]),t._v(" 的内容对其他类都是不可见的。前面已经看到， 这对于子类来说也完全适用，即子类也不能访问父类的私有域。")]),t._v(" "),s("p",[t._v("然而，在有些时候，人们希望父类中的某些方法或字段允许被子类访问，为此， 需要将这些方法或域声明为 "),s("code",[t._v("protected")]),t._v("。上篇文章说过，"),s("strong",[t._v("这个访问修饰符提供包访问权限和子类访问权限")]),t._v("。例如，如果将父类 "),s("code",[t._v("Animal")]),t._v("中的 "),s("code",[t._v("age")]),t._v("声明为 "),s("code",[t._v("proteced")]),t._v("，而不是私有的， "),s("code",[t._v("Cat")]),t._v("中的方法就可以直接地访问它，"),s("strong",[t._v("即使子类和父类不在一个包下")]),t._v("。这表明子类得到信任，可以正确地使用这个方法，而不和父类在同一个包下的其他类则不行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210124205831.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_7-java-中的单继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-java-中的单继承"}},[t._v("#")]),t._v(" 7. Java 中的单继承")]),t._v(" "),s("p",[t._v("在深入学习 Java 之前，我学的其实是 C++，而 C++ 是支持多继承的，也就是说 A 可以同时继承 B 和 C 甚至更多。然而，"),s("strong",[t._v("在 Java 中，子类只能继承一个父类")]),t._v("。也就是"),s("strong",[t._v("单继承")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129221818.png",alt:""}})]),t._v(" "),s("p",[t._v("为啥 Java 和 C++ 都是面向对象的，C++ 支持多继承和 Java 却不支持呢？C++ 语言是 1983 年由贝尔实验室的 Bjarne Stroustrup 在 C 语言的基础上推出的，Java 语言是 1995 年由 James Gosling 和同事共同正式推出的。在 C++ 被设计出来后，太多人掉进了多继承带来的坑，虽然它也提出了相应的解决办法，"),s("strong",[t._v("但 Java 语言本着简单的原则舍弃了 C++ 中的多继承，这样也会使程序更具安全性")]),t._v("。")]),t._v(" "),s("p",[t._v("那么多继承到底带来什么坑？其实也不难理解：")]),t._v(" "),s("p",[t._v("如果一个子类拥有多个父类的话，那么当多个父类中有重复的属性或者方法时，子类的调用结果就会含糊不清，也就是存在"),s("strong",[t._v("二义性")]),t._v("。因此 Java 使用了单继承。")]),t._v(" "),s("p",[t._v("那么问题来了，假设有一个人鱼种类，它既拥有动物 "),s("code",[t._v("Animal")]),t._v(" 的特征，又拥有人 "),s("code",[t._v("Person")]),t._v(" 的特征，既然不支持多继承，它如何同时具有这两个的特征呢？这时候就可以使用"),s("strong",[t._v("多接口（多实现）")]),t._v("，通过实现多个接口拓展类的功能，即使实现的多个接口中有重复的方法也没关系，因为在实现类中必须重写接口中的方法，所以调用的时候调用的是实现类中重写的方法。接口部分是后话了，本文暂且不做讨论。")]),t._v(" "),s("h2",{attrs:{id:"_8-为什么说要慎用继承-优先使用组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-为什么说要慎用继承-优先使用组合"}},[t._v("#")]),t._v(" 8. 为什么说要慎用继承，优先使用组合")]),t._v(" "),s("p",[t._v("终于来到了文章标题，为什么说要"),s("strong",[t._v("慎用继承，优先使用组合")]),t._v("？")]),t._v(" "),s("p",[t._v("因为在 Java 中使用继承就无法避免以下这两个问题：")]),t._v(" "),s("ul",[s("li",[t._v("1）打破了封装性，违反了 OOP 原则。迫使开发者去了解父类的实现细节，子类和父类耦合")]),t._v(" "),s("li",[t._v("2）父类更新后可能会导致一些不可知的错误")])]),t._v(" "),s("p",[t._v("这么说大家可能还无法直观的感受，这样，我们举个例子：自定义一个子类 "),s("code",[t._v("MyHashSet")]),t._v("，它继承了 Java 的原生 API "),s("code",[t._v("HashSet")]),t._v("，并重写了父类的两个方法 "),s("code",[t._v("add")]),t._v(" 和 "),s("code",[t._v("addAll")]),t._v("，它和父类唯一的区别是加入了一个计数器，用来统计添加过多少个元素。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyHashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" addCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 addCount")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAddCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" addCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写父类的 add 方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        addCount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写父类的 add 方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        addCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[s("code",[t._v("HashSet")]),t._v(" 是集合章节的内容，后续会详细讲解，这里大家只需要知道 "),s("code",[t._v("add")]),t._v(" 用来向集合中添加一个元素，"),s("code",[t._v("addAll")]),t._v(" 用来向集合中添加多个元素即可。")]),t._v(" "),s("p",[t._v("按照上面子类重写的逻辑，每向集合中添加一个元素，"),s("code",[t._v("addCount")]),t._v(" 就会相应的增加一个。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyHashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" myHashSet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyHashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyHashSet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myHashSet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAddCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这段测试代码我们通过子类重写的 "),s("code",[t._v("addAll")]),t._v(" 方法向集合中添加了 3 个元素，按理来说，"),s("code",[t._v("addCount")]),t._v(" 应该是 3。然而，运行结果却是 6。这看起来确实很匪夷所思。")]),t._v(" "),s("p",[t._v("我们进入父类 "),s("code",[t._v("HashSet")]),t._v(" 的源码看看，就能发现出错的原因：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129211930.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("addAll")]),t._v(" 方法内部调用的是 "),s("code",[t._v("add()")]),t._v(" 方法。也就是说，按照上面子类重写的逻辑，子类在调用自己的 "),s("code",[t._v("addAll()")]),t._v(" 方法时，首先 addCount 会加 3，然后调用父类的 "),s("code",[t._v("addAll()")]),t._v(" 方法，父类的 "),s("code",[t._v("addAll()")]),t._v(" 又会调用子类的 "),s("code",[t._v("add()")]),t._v(" 方法三次，这样 addCount 又会再加 3。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210129212535.png",alt:""}})]),t._v(" "),s("p",[t._v("出现这种情况的原因，就是"),s("strong",[t._v("父类中可覆盖的方法调用了别的可覆盖的方法，这时候如果子类覆盖了其中的一些方法，就可能导致错误")]),t._v("。")]),t._v(" "),s("p",[t._v("结合上图理解，"),s("code",[t._v("HashSet")]),t._v(" 类里有可覆盖的方法 "),s("code",[t._v("addAll")]),t._v(" 和方法 "),s("code",[t._v("add")]),t._v("，并且 "),s("code",[t._v("addAll")]),t._v(" 调用了 "),s("code",[t._v("add")]),t._v("。子类 "),s("code",[t._v("MyHashSet")]),t._v(" 重写了方法 "),s("code",[t._v("add")]),t._v("，这时候如果子类调用继承来的方法 "),s("code",[t._v("addAll")]),t._v("，那么方法 "),s("code",[t._v("addAll")]),t._v(" 调用的就不再是父类的 "),s("code",[t._v("HashSet.add()")]),t._v("，而是子类中的方法 "),s("code",[t._v("MyHashSet.add()")]),t._v("。")]),t._v(" "),s("p",[t._v("显然，这样的问题出现后，开发人员会一脸懵逼，子类的写法从表面上看来完全没有问题，这就迫使开发认域去了解父类的实现细节，从而打破了面向对象的封装性，因为封装性是要求隐藏实现细节的。更危险的是，错误不一定能轻易地被测出来，如果开发者不了解超类的实现细节就进行重写，那么可能就埋下了隐患。")]),t._v(" "),s("p",[t._v("第二个使用继承的缺点即父类更新后可能会导致一些不可知的错误，这点很好理解：")]),t._v(" "),s("ul",[s("li",[t._v("1）父类更改了方法的签名，会导致编译错误")]),t._v(" "),s("li",[t._v("2）父类新增了方法，并且正好和子类的某个方法同名但是返回类型不同，会导致编译错误")]),t._v(" "),s("li",[t._v("3）父类新增了方法，并且正好和子类的某个方法的签名完全相同，这时候编译器会认为子类进行了方法重写，会导致编译错误")]),t._v(" "),s("li",[t._v("4）......")])]),t._v(" "),s("p",[t._v("说到这里，大家大概了解了为什么说要慎重使用继承了吧，"),s("strong",[t._v("如果使用继承和组合都可以处理某种情况，那么优先使用组合")]),t._v("，组合完美的解决了上述继承的缺点。而如果必须要使用继承，那么应该精心设计父类，防止上述问题的发生，并提供详细的开发文档。")])])}),[],!1,null,null,null);a.default=e.exports}}]);