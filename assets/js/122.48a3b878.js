(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{590:function(t,s,a){"use strict";a.r(s);var n=a(29),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"链表理论基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表理论基础"}},[t._v("#")]),t._v(" 链表理论基础")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_1-数据结构三要素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构三要素"}},[t._v("#")]),t._v(" 1. 数据结构三要素")]),t._v(" "),a("img",{staticStyle:{zoom:"55%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229111427.png"}}),t._v(" "),a("p",[t._v("1）"),a("strong",[t._v("逻辑结构")]),t._v(" 指的是数据间的逻辑关系，与数据的存储无关，独立于计算机之外。它又分为线性结构和非线性结构")]),t._v(" "),a("ul",[a("li",[t._v("线性结构：线性表，栈，队列，串，数组和广义表")]),t._v(" "),a("li",[t._v("非线性结构：树，图，集合")])]),t._v(" "),a("p",[t._v("2）"),a("strong",[t._v("存储结构")]),t._v(" 是逻辑结构的存储映像，就是数据间的关系在计算机中的表现形式。也成为物理结构。它又分为 4 类：顺序存储 ，链式存储，索引存储和散列存储")]),t._v(" "),a("ul",[a("li",[t._v("顺序存储：把逻辑上相邻的元素存储在物理位置也相邻的存储单元里")]),t._v(" "),a("li",[t._v("链式存储：不要求物理位置的相邻，借助指示元素存储地址的指针表示元素之间的逻辑关系")]),t._v(" "),a("li",[t._v("索引存储：在存储元素信息的同时，添加附加的索引表，通过索引对节点进行操作")]),t._v(" "),a("li",[t._v("散列存储：也称 Hash 存储，根据结点的关键字通过散列函数计算出结点的存储地址")])]),t._v(" "),a("p",[a("strong",[t._v("相同的逻辑结构在计算机里可以用不同的存储结构实现")]),t._v("。比如逻辑结构中的线性结构，可以用数组（顺序存储）或单向链表（链接存储）来实现。")]),t._v(" "),a("p",[t._v("3）"),a("strong",[t._v("数据运算")]),t._v("： 施加在数据上的运算（包括定义与实现）。运算的定义是针对逻辑结构，运算的实现是针对物理结构")]),t._v(" "),a("h2",{attrs:{id:"_2-线性表的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线性表的定义"}},[t._v("#")]),t._v(" 2. 线性表的定义")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229111934.png"}}),t._v(" "),a("p",[a("strong",[t._v("线性表定义")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("具有相同数据类型的 n 个数据元素的有限序列")]),t._v(" "),a("li",[t._v("线性表是一种逻辑结构，表示元素之间一对一的逻辑关系")])]),t._v(" "),a("p",[t._v("使用线性表存储数据的方式可以这样理解，"),a("strong",[t._v("把所有数据用一根线儿串起来，再存储到物理空间中")])]),t._v(" "),a("p",[t._v("下图中，左侧是“串”起来的数据，右侧是空闲的物理空间。把这 “一串儿” 数据放置到物理空间，我们可以选择以下两种方式：")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229115716.png"}}),t._v(" "),a("p",[a("strong",[t._v("将具有“一对一”关系的数据“线性”地存储到物理空间中")]),t._v("，这种存储结构就称为线性存储结构：")]),t._v(" "),a("ul",[a("li",[t._v("① "),a("strong",[t._v("顺序表")]),t._v("（如上图左边）：将数据依次存储在连续的整块物理空间中")]),t._v(" "),a("li",[t._v("② "),a("strong",[t._v("链表")]),t._v("（如上图右边）：数据分散的存储在物理空间中，通过一根线保存着它们之间的逻辑关系\n"),a("ul",[a("li",[t._v("单链表")]),t._v(" "),a("li",[t._v("双链表")]),t._v(" "),a("li",[t._v("循环单链表")]),t._v(" "),a("li",[t._v("循环双链表")])])])]),t._v(" "),a("p",[t._v("下面详细讲解这两种存储结构 👇")]),t._v(" "),a("h2",{attrs:{id:"_3-顺序表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-顺序表"}},[t._v("#")]),t._v(" 3. 顺序表")]),t._v(" "),a("h3",{attrs:{id:"_1-顺序表定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-顺序表定义"}},[t._v("#")]),t._v(" ① 顺序表定义")]),t._v(" "),a("p",[t._v("线性表的顺序存储。"),a("strong",[t._v("逻辑上相邻的两个元素在物理位置上也相邻")])]),t._v(" "),a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229112953.png"}}),t._v(" "),a("p",[a("strong",[t._v("数组")]),t._v("就是顺序表，下标一般从 0 开始：")]),t._v(" "),a("img",{staticStyle:{zoom:"65%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229113127.png"}}),t._v(" "),a("p",[a("strong",[t._v("顺序表的特点")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("随机访问（通过首地址和元素序号可在时间 O(1) 内找到元素）")]),t._v(" "),a("li",[t._v("插入和删除需要移动大量元素")]),t._v(" "),a("li",[t._v("存储密度高，每个结点只存储数据元素")])]),t._v(" "),a("h3",{attrs:{id:"_2-顺序表基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-顺序表基本操作"}},[t._v("#")]),t._v(" ② 顺序表基本操作")]),t._v(" "),a("h4",{attrs:{id:"i-插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-插入"}},[t._v("#")]),t._v(" Ⅰ 插入")]),t._v(" "),a("p",[t._v("在数组 a 的第 "),a("code",[t._v("i")]),t._v(" 个位置 (下标 "),a("code",[t._v("i-1")]),t._v(") 插入元素 "),a("code",[t._v("e")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第i个元素及其之后的元素后移")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlength"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229114105.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("最好情况：在表尾插入，时间复杂度 O(1)")]),t._v(" "),a("li",[t._v("最坏情况：在表头插入，时间复杂度 O(n)")]),t._v(" "),a("li",[t._v("平均情况：时间复杂度 O(n)")])]),t._v(" "),a("h4",{attrs:{id:"ii-删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ii-删除"}},[t._v("#")]),t._v(" Ⅱ 删除")]),t._v(" "),a("p",[t._v("删除数组 a 的第 "),a("code",[t._v("i")]),t._v(" 个位置的元素")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从第 i 个位置元素前移")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlength "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("img",{staticStyle:{zoom:"62%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229114331.png"}}),t._v(" "),a("ul",[a("li",[t._v("最好情况：删除表尾元素，时间复杂度 O(1)")]),t._v(" "),a("li",[t._v("最坏情况：删除表头元素，时间复杂度 O(n)")]),t._v(" "),a("li",[t._v("平均情况：时间复杂度 O(n)")])]),t._v(" "),a("h4",{attrs:{id:"iii-按值查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iii-按值查找"}},[t._v("#")]),t._v(" Ⅲ 按值查找")]),t._v(" "),a("p",[t._v("查找数组 a 中值为 "),a("code",[t._v("e")]),t._v(" 的元素的下标")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("最好情况：查找元素在表头，时间复杂度 O(1)")]),t._v(" "),a("li",[t._v("最坏情况：查找元素在表尾，时间复杂度 O(n)")]),t._v(" "),a("li",[t._v("平均情况：时间复杂度 O(n)")])]),t._v(" "),a("h2",{attrs:{id:"_4-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-链表"}},[t._v("#")]),t._v(" 4. 链表")]),t._v(" "),a("h3",{attrs:{id:"_1-链表的定义与结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-链表的定义与结构"}},[t._v("#")]),t._v(" ① 链表的定义与结构")]),t._v(" "),a("p",[t._v("线性表的链式存储。"),a("strong",[t._v("逻辑上相邻的两个元素在物理位置不一定也相邻")])]),t._v(" "),a("p",[t._v("例如，使用链表存储 "),a("code",[t._v("{1,2,3}")]),t._v("，数据的物理存储状态如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"62%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229120404.png"}}),t._v(" "),a("p",[t._v("可以看到，上图根本无法体现出各数据之间的逻辑关系。对此，链表的解决方案是，每个数据元素在存储时都配备一个"),a("strong",[t._v("指针")]),t._v("，用于指向自己的直接后继元素。如下图所示：")]),t._v(" "),a("img",{staticStyle:{zoom:"65%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229120659.png"}}),t._v(" "),a("p",[t._v("当然，指针可以指向自己的直接后继元素，也可以指向自己的直接前驱元素。为此，链表可分为：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("单链表")]),t._v("（指针指向自己的直接后继元素）")]),t._v(" "),a("li",[a("strong",[t._v("双链表")]),t._v("（指针指向自己的直接后继元素和直接前驱元素）")]),t._v(" "),a("li",[a("strong",[t._v("循环单链表")]),t._v("（指针指向自己的直接后继元素，表尾节点的指针指向头节点）")]),t._v(" "),a("li",[a("strong",[t._v("循环双链表")]),t._v("（指针指向自己的直接后继元素和直接前驱元素，表尾节点的指针指向头节点）")])]),t._v(" "),a("p",[t._v("通过以上大家应该也知道了，链表中每个数据的存储都由以下两部分组成：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("数据域")]),t._v("：数据元素本身")]),t._v(" "),a("li",[a("strong",[t._v("指针域")]),t._v("：指向该元素直接后继/前驱/...元素的指针")])]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229122012.png"}}),t._v(" "),a("p",[t._v("上图所示的结构在链表中称为"),a("strong",[t._v("节点")]),t._v("。也就是说，链表实际存储的是一个一个的节点，真正的数据元素包含在这些节点中，举个单链表的例子：")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229122427.png"}}),t._v(" "),a("p",[t._v("🚨 当然，上所示的链表结构并不完整。一个完整的链表需要由以下几部分构成：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("头指针")]),t._v("：一个普通的指针，它的特点是永远指向链表第一个节点的位置。很明显，头指针用于指明链表的位置，便于后期找到链表并使用表中的数据")]),t._v(" "),a("li",[a("strong",[t._v("节点")]),t._v("：链表中的节点又分为头节点、首元节点和其他节点\n"),a("ul",[a("li",[a("strong",[t._v("头节点")]),t._v("：其实就是一个"),a("u",[t._v("不存任何数据的空节点，通常作为链表的第一个节点。对于链表来说，头节点不是必须的，它的作用只是为了方便解决某些实际问题")])]),t._v(" "),a("li",[a("strong",[t._v("首元节点")]),t._v("：由于头节点（也就是空节点）的缘故，链表中称"),a("u",[t._v("第一个存有数据的节点为首元节点")]),t._v("。首元节点只是对链表中第一个存有数据节点的一个称谓，用于和头节点进行区分，没有实际意义")]),t._v(" "),a("li",[a("strong",[t._v("其他节点")]),t._v("：链表中其他的节点")])])])]),t._v(" "),a("p",[t._v("因此，一个存储 "),a("code",[t._v("{1,2,3}")]),t._v(" 的完整单链表结构如图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229123550.png",alt:""}})]),t._v(" "),a("p",[t._v("💡 "),a("strong",[t._v("引入头节点的优点：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("链表的首元节点的操作与其他位置的元素操作一样，无须进行特殊处理")])]),t._v(" "),a("li",[a("p",[t._v("无论链表是否为空，其头指针都是指向头节点的非空指针，空表和非空表的处理得到了统一")])])]),t._v(" "),a("h3",{attrs:{id:"_2-单链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-单链表"}},[t._v("#")]),t._v(" ② 单链表")]),t._v(" "),a("h4",{attrs:{id:"i-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-定义"}},[t._v("#")]),t._v(" Ⅰ 定义")]),t._v(" "),a("p",[t._v("单链表就是指针指向自己的直接后继元素的链表")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229122747.png"}}),t._v(" "),a("p",[t._v("以 Java 为例，我们自定义一个单链表结构：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("单链表可以解决顺序表需要大量连续存储空间的缺点，但单链表附加指针域，也存在浪费存储空间的缺点")])]),t._v(" "),a("p",[t._v("单链表是非随机存储的存储结构：即不能直接找到表中某个特点的结点。需要从头开始遍历。")]),t._v(" "),a("p",[t._v("单链表访问前驱的时间复杂度为 O(n)，访问后继 O(1)")]),t._v(" "),a("h4",{attrs:{id:"ii-基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ii-基本操作"}},[t._v("#")]),t._v(" Ⅱ 基本操作")]),t._v(" "),a("h5",{attrs:{id:"头插法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头插法"}},[t._v("#")]),t._v(" 头插法")]),t._v(" "),a("p",[t._v("在头节点 "),a("code",[t._v("L")]),t._v(" 的后面插入节点 "),a("code",[t._v("s")]),t._v("，即 "),a("code",[t._v("s")]),t._v(" 节点成为当前链表的首元节点")]),t._v(" "),a("p",[a("strong",[t._v("头插法的读入顺序和生成顺序相反")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229125226.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"尾插法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#尾插法"}},[t._v("#")]),t._v(" 尾插法")]),t._v(" "),a("p",[t._v("在链表最后一个节点 "),a("code",[t._v("r")]),t._v(" 的后面插入节点 "),a("code",[t._v("s")]),t._v("，即 "),a("code",[t._v("s")]),t._v(" 节点成为当前链表的最后一个节点")]),t._v(" "),a("p",[a("strong",[t._v("尾插法的读入顺序和生成顺序相同")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229125708.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s 节点成为链表的最后一个节点")]),t._v("\n")])])]),a("h5",{attrs:{id:"插入节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入节点"}},[t._v("#")]),t._v(" 插入节点")]),t._v(" "),a("p",[a("code",[t._v("p")]),t._v(" 节点之后插入 "),a("code",[t._v("s")]),t._v(" 节点")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229124420.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"删除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[t._v("#")]),t._v(" 删除节点")]),t._v(" "),a("p",[a("code",[t._v("p")]),t._v(" 节点之后删除 "),a("code",[t._v("q")]),t._v(" 节点")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229130037.png"}}),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除 p 之后的 q ")]),t._v("\nq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("还有一种方法就是把要删除的节点和它的后继节点值进行交换，然后直接删除这个后继节点就行，这样就不用找前驱节点了。")])]),t._v(" "),a("h3",{attrs:{id:"_3-双链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-双链表"}},[t._v("#")]),t._v(" ③ 双链表")]),t._v(" "),a("h4",{attrs:{id:"i-定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-定义-2"}},[t._v("#")]),t._v(" Ⅰ 定义")]),t._v(" "),a("p",[t._v("双链表就是同时具有前驱指针和后继指针的链表")]),t._v(" "),a("p",[t._v("双链表访问前驱和后继结点时间复杂度都是 O(1)")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229130635.png"}}),t._v(" "),a("p",[t._v("以 Java 为例，我们自定义一个双链表结构：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" prior"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"ii-基本操作-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ii-基本操作-2"}},[t._v("#")]),t._v(" Ⅱ 基本操作")]),t._v(" "),a("h5",{attrs:{id:"插入节点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入节点-2"}},[t._v("#")]),t._v(" 插入节点")]),t._v(" "),a("p",[a("code",[t._v("p")]),t._v(" 节点之后插入 "),a("code",[t._v("s")]),t._v(" 节点")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229131613.png"}}),t._v(" "),a("p",[t._v("上图中 2、3 顺序可调换")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prior "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prior "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"删除节点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点-2"}},[t._v("#")]),t._v(" 删除节点")]),t._v(" "),a("p",[t._v("删除 "),a("code",[t._v("p")]),t._v(" 节点之后的 "),a("code",[t._v("s")]),t._v(" 节点")]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229131945.png"}}),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prior "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-循环单链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-循环单链表"}},[t._v("#")]),t._v(" ③ 循环单链表")]),t._v(" "),a("p",[t._v("循环单链表就是"),a("strong",[t._v("表尾节点的指针指向头节点的单链表")])]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229132250.png"}}),t._v(" "),a("p",[t._v("判空条件：表尾结点的 "),a("code",[t._v("next")]),t._v(" 是否是等于头指针")]),t._v(" "),a("h3",{attrs:{id:"_4-循环双链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-循环双链表"}},[t._v("#")]),t._v(" ④ 循环双链表")]),t._v(" "),a("p",[t._v("循环双链表就是"),a("strong",[t._v("表尾节点的指针指向头节点的双链表")])]),t._v(" "),a("img",{staticStyle:{zoom:"60%"},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20201229132433.png"}}),t._v(" "),a("h2",{attrs:{id:"_5-顺序表和链表的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-顺序表和链表的比较"}},[t._v("#")]),t._v(" 5. 顺序表和链表的比较")]),t._v(" "),a("p",[a("strong",[t._v("1）存取方式")])]),t._v(" "),a("ul",[a("li",[t._v("顺序表可以顺序存取，也可以随机存取")]),t._v(" "),a("li",[t._v("链表只能从表头顺序存取元素")])]),t._v(" "),a("p",[a("strong",[t._v("2）逻辑结构与物理结构")])]),t._v(" "),a("ul",[a("li",[t._v("顺序存储时，逻辑上相邻的元素，对应的物理存储位置也相邻")]),t._v(" "),a("li",[t._v("链式存储时，逻辑上相邻的元素，物理存储位置不一定相邻，其逻辑关系是通过指针链接来表示的")])]),t._v(" "),a("p",[a("strong",[t._v("3）查找、插入和删除操作")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对于按值查找，顺序表无序时，两者的时间复杂度均为 O(n)；顺序表有序时，可采用折半查找，此时的时间复杂度为 O(log2n)")]),t._v(" "),a("p",[t._v("对于按序号查找，顺序表支持随机访问，时间复杂度仅为 O(1)，而链表的平均时间复杂度为 O(n)。")])]),t._v(" "),a("li",[a("p",[t._v("顺序表的插入、删除操作，平均需要移动半个表长的元素")]),t._v(" "),a("p",[t._v("链表的插入、删除操作，只需要修改相关结点的指针域既可。由于链表的每个结点都有指针域，所以在存储空间上要比顺序表付出的代价大，存储密度不够大。")])])]),t._v(" "),a("p",[a("strong",[t._v("4）空间分配")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("顺序存储在静态存储分配情况下，一旦存储空间装满就不能扩充，若再加入新元素，则会出现溢出，所以需要预先分配足够大的存储空间。预先分配过大，可能会导致顺序表候补大量闲置；预先分配过小，又会造成溢出。")]),t._v(" "),a("p",[t._v("动态存储分配虽然存储空间可以扩充，但需要移动大量元素，导致操作效率降低，而且若内存中没有更大的连续存储空间，则会导致分配失败")])]),t._v(" "),a("li",[a("p",[t._v("链表只在需要时申请分配，高效灵活")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);