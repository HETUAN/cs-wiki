(window.webpackJsonp=window.webpackJsonp||[]).push([[341],{809:function(t,a,s){"use strict";s.r(a);var n=s(29),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-中为什么要设计包装类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中为什么要设计包装类"}},[t._v("#")]),t._v(" Java 中为什么要设计包装类")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("公众号最近更新频率慢了，因为"),s("strong",[t._v("最近在准备暑期实习")]),t._v("，之前寻思着一边复习一边写文章，两全其美。后来发现一篇读起来比较舒服的文章写出来加上配图得花上四五个小时甚至更多，但这个知识点我可能半个小时就能复习完了，春招在即，时间比较紧迫，所以最近文章可能改为一周一更或者一周两更，希望各位理解。另外，有和我一样在准备暑期实习的小伙伴可以联系我互相交流 😊")]),t._v(" "),s("p",[t._v("全文脉络思维导图如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210301000309.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_1-为什么需要包装类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么需要包装类"}},[t._v("#")]),t._v(" 1. 为什么需要包装类")]),t._v(" "),s("p",[t._v("在 Java 中，万物皆对象，所有的操作都要求用对象的形式进行描述。但是 Java 中除了对象（引用类型）还有八大基本类型，它们不是对象。那么，为了把基本类型转换成对象，最简单的做法就是"),s("strong",[t._v("将基本类型作为一个类的属性保存起来")]),t._v("，也就是把基本数据类型包装一下，这也就是包装类的由来。")]),t._v(" "),s("p",[t._v("这样，我们先自己实现一个简单的包装类，以包装基本类型 "),s("code",[t._v("int")]),t._v(" 为例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包装类 MyInt")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInt")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 基本数据类型")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数,传入基本数据类型")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取得包装类中的数据")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("测试一下这个包装类：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyInt")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 100 是基本数据类型, 将基本数据类型包装后成为对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从对象中取得基本数据类型")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当然，我们自己实现的这个包装类非常简单，Java 给我们提供了更完善的内置包装类：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("基本类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("对应的包装类（位于 java.lang 包中）")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Byte")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("short")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Short")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Long")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Float")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Double")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("char")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Character")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean")])])])]),t._v(" "),s("p",[t._v("前 6 个类派生于公共的超类 "),s("code",[t._v("Number")]),t._v("，而 "),s("code",[t._v("Character")]),t._v(" 和 "),s("code",[t._v("Boolean")]),t._v(" 是 "),s("code",[t._v("Object")]),t._v(" 的直接子类。")]),t._v(" "),s("p",[t._v("来看看包装类的声明，以 "),s("code",[t._v("Integer")]),t._v("  为例：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224202356.png",alt:""}})]),t._v(" "),s("p",[t._v("被 "),s("code",[t._v("final")]),t._v(" 修饰，也就是说 Java 内置的"),s("strong",[t._v("包装类是无法被继承的")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_2-装箱与拆箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-装箱与拆箱"}},[t._v("#")]),t._v(" 2. 装箱与拆箱")]),t._v(" "),s("p",[t._v("OK，现在我们已经知道了，存在基本数据类型与其对应的包装类，那么，他们之间互相的转换操作就称为装箱与拆箱：")]),t._v(" "),s("ul",[s("li",[t._v("装箱：将基本数据类型转换成包装类（每个包装类的构造方法都可以接收各自数据类型的变量）")]),t._v(" "),s("li",[t._v("拆箱：从包装类之中取出被包装的基本类型数据（使用包装类的 xxxValue 方法）")])]),t._v(" "),s("p",[t._v("下面以 "),s("code",[t._v("Integer")]),t._v(" 为例，我们来看看 Java 内置的包装类是如何进行拆装箱的：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动装箱")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动拆箱")]),t._v("\n")])])]),s("p",[t._v("可以看出，和上面我们自己写的包装类使用方式基本一样，事实上，"),s("code",[t._v("Integer")]),t._v(" 中的这两个方法其底层实现和我们上述写的代码也是差不多的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224202635.png",alt:""}})]),t._v(" "),s("p",[t._v("不知道各位发现没，"),s("code",[t._v("value")]),t._v(" 被声明为 "),s("code",[t._v("final")]),t._v(" 了，也就是说"),s("strong",[t._v("一旦构造了包装器，就不允许更改包装在其中的值")]),t._v("。")]),t._v(" "),s("p",[t._v("另外，需要注意的是，这种形式的代码是 "),s("strong",[t._v("JDK 1.5 以前")]),t._v("的！！！"),s("strong",[t._v("JDK 1.5 之后")]),t._v("，Java 设计者为了方便开发提供了"),s("strong",[t._v("自动装箱")]),t._v("与"),s("strong",[t._v("自动拆箱")]),t._v("的机制，并且可以直接利用包装类的对象进行数学计算。")]),t._v(" "),s("p",[t._v("还是以 "),s("code",[t._v("Integer")]),t._v(" 为例我们来看看自动拆装箱的过程：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动装箱. 基本数据类型 int -> 包装类 Integer")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动拆箱. Integer -> int")]),t._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接利用包装类的对象进行数学计算")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("看见没有，基本数据类型到包装类的转换，不需要像上面一样使用构造函数，直接 "),s("code",[t._v("=")]),t._v(" 就完事儿；同样的，包装类到基本数据类型的转换，也不需要我们手动调用包装类的 xxxValue 方法了，直接 "),s("code",[t._v("=")]),t._v(" 就能完成拆箱。这也是将它们称之为自动的原因。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224214502.png",alt:""}})]),t._v(" "),s("p",[t._v("我们来看看这段代码反编译后的文件，底层到底是什么原理：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以看见，自动装箱的底层原理是调用了包装类的 "),s("code",[t._v("valueOf")]),t._v(" 方法，而自动拆箱的底层调用了包装类的 "),s("code",[t._v("intValue()")]),t._v(" 方法。")]),t._v(" "),s("h2",{attrs:{id:"_3-不简单的-integer-valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-不简单的-integer-valueof"}},[t._v("#")]),t._v(" 3. 不简单的 Integer.valueOf")]),t._v(" "),s("p",[t._v("我们上面已经看过了用于自动拆箱的 "),s("code",[t._v("intValue")]),t._v(" 方法的源码，非常简单。接下来咱来看看用于自动装箱的 "),s("code",[t._v("valueOf")]),t._v("，其他包装类倒没什么好说的，不过 "),s("code",[t._v("Integer")]),t._v(" 中的这个方法还是有点东西的：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224210527.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("IntegerCache")]),t._v(" 又是啥，点进去看看：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224210731.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("IntegerCache")]),t._v(" 是 "),s("code",[t._v("Integer")]),t._v(" 类中的静态内部类，综合这两段代码，我们大概也能知道，"),s("code",[t._v("IntegerCache")]),t._v(" 其实就是个"),s("strong",[t._v("缓存")]),t._v("，其中定义了一个缓冲区 "),s("code",[t._v("cache")]),t._v("，用于存储 "),s("code",[t._v("Integer")]),t._v(" 类型的数据，"),s("strong",[t._v("缓存区间是 [-128, 127]")]),t._v("。")]),t._v(" "),s("p",[t._v("回到 "),s("code",[t._v("valueOf")]),t._v(" 的源码：它首先会判断 int 类型的实参 i 是否在可缓存区间内，如果在，就直接从缓存 "),s("code",[t._v("IntegerCache")]),t._v(" 中获取对应的 "),s("code",[t._v("Integer")]),t._v(" 对象；如果不在缓存区间内，则会 new 一个新的 "),s("code",[t._v("Integer")]),t._v(" 对象。")]),t._v(" "),s("p",[t._v("结合这个特性，我们来看一个题目，两种类似的代码逻辑，但是却得到完全相反的结果。：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" a2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" a2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" b2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("我们知道，"),s("code",[t._v("==")]),t._v(" 拥有两种应用场景：")]),t._v(" "),s("ul",[s("li",[t._v("对于引用类型来说，判断的是内存地址是否相等")]),t._v(" "),s("li",[t._v("对于基本类型来说，判断的是值是否相等")])]),t._v(" "),s("p",[t._v("从 a1 开始看，由于其值在 "),s("code",[t._v("InterCache")]),t._v(" 的缓存区间内，所以这个 "),s("code",[t._v("Integer")]),t._v(" 对象会被存入缓存。而在创建 a2 的时候，由于其值和 a1 相等，所以直接从缓存中取出值为 127 的 "),s("code",[t._v("Integer")]),t._v(" 对象给 a2 使用，也就是说，a1 和 a2 这两个 "),s("code",[t._v("Integer")]),t._v(" 的对象引用都指向同一个地址。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224213106.png",alt:""}})]),t._v(" "),s("p",[t._v("对于 b1 和 b2 来说，由于 128 不在 "),s("code",[t._v("IntegerCache")]),t._v(" 的缓存区间内，那就只能自己老老实实开辟空间了，所以 b1 和 b2 指向不同的内存地址。")]),t._v(" "),s("p",[t._v("很显然，由于 "),s("code",[t._v("InterCache")]),t._v(" 缓存机制的存在，可能会让我们在编程的时候出现困惑，因此最好使用 "),s("code",[t._v(".equals")]),t._v(" 方法来比较 "),s("code",[t._v("Integer")]),t._v(" 值是否相等。"),s("code",[t._v("Integer")]),t._v(" 重写了 "),s("code",[t._v(".equals")]),t._v(" 方法：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224214035.png",alt:""}})]),t._v(" "),s("p",[t._v("当然，其他包装类虽然没有缓存机制，但是也都重载了 "),s("code",[t._v(".equals")]),t._v(" 方法，用于根据值来判断是否相等。因此，得出结论，"),s("strong",[t._v("使用 "),s("code",[t._v("equals")]),t._v(" 方法来比较两个包装类对象的值")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_4-object-类可以接收所有数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-object-类可以接收所有数据类型"}},[t._v("#")]),t._v(" 4. Object 类可以接收所有数据类型")]),t._v(" "),s("p",[t._v("综上，有了自动拆装箱机制，基本数据类型可以自动的被转为包装类，而 "),s("code",[t._v("Object")]),t._v(" 是所有类的父类，也就是说，"),s("strong",[s("code",[t._v("Object")]),t._v(" 可以接收所有的数据类型了")]),t._v("（引用类型、基本类型）！！！")]),t._v(" "),s("p",[t._v("不信你可以试试，直接用 "),s("code",[t._v("Object")]),t._v(" 类接收一个基本数据类型 "),s("code",[t._v("int")]),t._v("，完全是可以的。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("解释一下上面这段代码发生了什么，下面这张图很重要，大家仔细看：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224210346.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_5-包装类在集合中的广泛使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-包装类在集合中的广泛使用"}},[t._v("#")]),t._v(" 5. 包装类在集合中的广泛使用")]),t._v(" "),s("p",[t._v("其实包装类最常见的使用就是在集合中，因为集合不允许存储基本类型的数据，只能存储引用类型的数据。那如果我们想要存储 1、2、3 这样的基本类型数据怎么办？举个例子，我们可以如下声明一个 "),s("code",[t._v("Integer")]),t._v("对象的数组列表：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("往这个列表中添加 "),s("code",[t._v("int")]),t._v(" 型数据：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("上面这个调用在底层将会发生自动装箱操作：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("基本数据类型 "),s("code",[t._v("int")]),t._v(" 会被转换成 "),s("code",[t._v("Integer")]),t._v(" 对象存入集合中。")]),t._v(" "),s("p",[t._v("我们再来从这个集合中根据某个下标 i 获取对应的 "),s("code",[t._v("Integer")]),t._v(" 对象，并用基本数据类型 "),s("code",[t._v("int")]),t._v(" 接收：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面这个调用在底层将会发生自动拆箱操作：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"_6-数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据类型转换"}},[t._v("#")]),t._v(" 6. 数据类型转换")]),t._v(" "),s("p",[t._v("另外，除了在集合中的广泛应用，包装类还包含一个重要功能，那就是提供将String型数据变为基本数据类型的方法，使用几个代表的类做说明：")]),t._v(" "),s("p",[s("code",[t._v("Integer")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224220251.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("Double")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224220313.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("Boolean")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224220339.png",alt:""}})]),t._v(" "),s("p",[t._v("这些方法均被 "),s("code",[t._v("static")]),t._v(" 标识，也就是说它们被各自对应的所有对象共同维护，直接通过类名访问该方法。举个例子：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String -> int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),s("p",[t._v("需要特别注意的是："),s("code",[t._v("Character")]),t._v(" 类里面并不存在字符串变为字符的方法，因为 "),s("code",[t._v("String")]),t._v(" 类中已经有一个 "),s("code",[t._v("charAt()")]),t._v("的方法可以根据索引取出字符内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210224220755.png",alt:""}})])])}),[],!1,null,null,null);a.default=e.exports}}]);