(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{692:function(e,t,n){"use strict";n.r(t);var r=n(29),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("双指针法适用于各种数据结构，数组、链表、栈和队列等等，应用范围非常广泛，而且代码还比较简单。")]),e._v(" "),n("p",[e._v("双指针技巧总体可分为两类：")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("「左右指针」")]),e._v("：主要解决数组（或者字符串）中的问题，比如字符串逆置等")]),e._v(" "),n("li",[n("strong",[e._v("「快慢指针」")]),e._v("：主要解决链表中的问题，比如典型的判定链表中是否包含环。原地修改数组的问题一般也可以用快慢指针来解决。")])]),e._v(" "),n("p",[e._v("左右指针类型中有一种**「滑动窗口」**算法，属于双指针中比较难的题目，这里我们给他单独划一类来讲。")]),e._v(" "),n("h2",{attrs:{id:"_1-左右指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-左右指针"}},[e._v("#")]),e._v(" 1. 左右指针")]),e._v(" "),n("p",[e._v("左右指针在数组中实际是指两个索引值，一般初始化为 "),n("code",[e._v("left = 0, right = nums.length - 1")]),e._v(" 。")]),e._v(" "),n("p",[n("strong",[e._v("二分查找就是一个非常典型的左右指针的应用")]),e._v("。")]),e._v(" "),n("p",[e._v("代表题目：")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("344. 反转字符串 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"}},[e._v("167. 两数之和 II - 输入有序数组 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("557. 反转字符串中的单词 III - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("151. 翻转字符串里的单词 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/3sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("15. 三数之和 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/4sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("18. 四数之和 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"_2-滑动窗口算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-滑动窗口算法"}},[e._v("#")]),e._v(" 2. 滑动窗口算法")]),e._v(" "),n("p",[e._v("滑动窗口算法是双指针里面最难的一部分，不过这个算法技巧的思路非仍然是左右指针的思想，就是维护一个窗口，不断滑动，然后更新答案。该算法的大致逻辑如下：")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" left "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" right "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("right "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 增大窗口    ")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" newNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("right"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    right"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 增大窗口后对 window 进行处理")]),e._v("\n    window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("newNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// window needs shrink")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("window needs shrink"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 缩小窗口        ")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" removeNum "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("left"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("       \n        left"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("    \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 缩小窗口后对 window 进行处理")]),e._v("\n        window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("removeNum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("代表题目：")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[e._v("3. 无重复字符的最长子串 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"}},[e._v("567. 字符串的排列 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"}},[e._v("76. 最小覆盖子串 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"_3-快慢指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-快慢指针"}},[e._v("#")]),e._v(" 3. 快慢指针")]),e._v(" "),n("p",[e._v("快慢指针一般用来解决两个场景下的问题：")]),e._v(" "),n("p",[e._v("1）"),n("strong",[e._v("链表")])]),e._v(" "),n("p",[e._v("快慢指针一般都初始化指向链表的头结点 "),n("code",[e._v("head")]),e._v("，前进时快指针 "),n("code",[e._v("fast")]),e._v(" 在前，慢指针 "),n("code",[e._v("slow")]),e._v(" 在后，巧妙解决一些链表中的问题。")]),e._v(" "),n("p",[e._v("代表题目：")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"}},[e._v("141. 环形链表 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("142. 环形链表 II - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("876. 链表的中间结点 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("2）"),n("strong",[e._v("原地修改数组")])]),e._v(" "),n("p",[e._v("我们知道对于数组来说，在尾部插入、删除元素是比较高效的，时间复杂度是 O(1)，但是如果在中间或者开头插入、删除元素，就会涉及数据的搬移，时间复杂度为 O(N)，效率较低。")]),e._v(" "),n("p",[e._v("所谓原地修改，就是不允许我们 new 一个新的数组，只能在原数组上进行操作，然后返回结果。")]),e._v(" "),n("p",[e._v("如果不是原地修改的话，我们直接 new 一个 "),n("code",[e._v("int[]")]),e._v(" 数组，把修改之后的元素放进这个新数组中，然后返回这个新数组即可。")]),e._v(" "),n("p",[e._v("解决这类原地修改数组的问题一般都可以使用快慢指针的思想。")]),e._v(" "),n("p",[e._v("代表题目：")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[e._v("26. 删除有序数组中的重复项 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"}},[e._v("27. 移除元素 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("283. 移动零 - 力扣（LeetCode） (leetcode-cn.com)"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);