(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{810:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试常备-字符串三剑客-string、stringbuffer、stringbuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试常备-字符串三剑客-string、stringbuffer、stringbuilder"}},[t._v("#")]),t._v(" 面试常备，字符串三剑客 String、StringBuffer、StringBuilder")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("字符串操作毫无疑问是计算机程序设计中最常见的行为之一，在 Java 大展拳脚的 Web 系统中更是如此。")]),t._v(" "),a("p",[t._v("全文脉络思维导图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218215307.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_1-三剑客之首-不可变的-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-三剑客之首-不可变的-string"}},[t._v("#")]),t._v(" 1. 三剑客之首：不可变的 String")]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[a("strong",[t._v("Java 没有内置的字符串类型")]),t._v("， 而是在标准 Java 类库中提供了一个"),a("strong",[t._v("预定义类")]),t._v(" "),a("code",[t._v("String")]),t._v("。每个用"),a("strong",[t._v("双引号括起来的字符串都是 "),a("code",[t._v("String")]),t._v(" 类的一个实例")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("看一下 "),a("code",[t._v("String")]),t._v(" 的源码，"),a("strong",[t._v("在 Java 8 中，"),a("code",[t._v("String")]),t._v(" 内部是使用 "),a("code",[t._v("char")]),t._v(" 数组来存储数据的")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value is used for character storage. */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("可以看到，"),a("code",[t._v("String")]),t._v(" 类是被 "),a("code",[t._v("final")]),t._v(" 修饰的，因此 "),a("strong",[a("code",[t._v("String")]),t._v(" 类不允许被继承")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("而在 "),a("code",[t._v("Java 9")]),t._v(" 之后，"),a("code",[t._v("String")]),t._v(" 类的实现改用 "),a("code",[t._v("byte")]),t._v(" 数组存储字符串")]),t._v("，同时使用 "),a("code",[t._v("coder")]),t._v(" 来标识使用了哪种编码。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value is used for character storage. */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The identifier of the encoding used to encode the bytes in {@code value}. */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("不过，无论是 Java 8 还是 Java 9，"),a("strong",[t._v("用来存储数据的 char 或者 byte 数组 "),a("code",[t._v("value")]),t._v(" 都一直是被声明为 "),a("code",[t._v("final")]),t._v(" 的")]),t._v("，这意味着 "),a("code",[t._v("value")]),t._v(" 数组初始化之后就不能再引用其它数组了。并且 "),a("code",[t._v("String")]),t._v("内部没有改变 "),a("code",[t._v("value")]),t._v(" 数组的方法，因此我们就说 "),a("code",[t._v("String")]),t._v(" 是不可变的。")]),t._v(" "),a("p",[t._v("所谓不可变，就如同数字 3 永远是数字 3 —样，字符串 “hello” 永远包含字符 h、e、1、1 和 o 的代码单元序列， 不能修改其中的任何一个字符。当然， 可以修改字符串变量 str， 让它引用另外一个字符串， 这就如同可以将存放 3 的数值变量改成存放 4 一样。")]),t._v(" "),a("p",[t._v("我们看个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"asdf"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("toUpperCase")]),t._v(" 用来将字符串全部转为大写字符，进入 "),a("code",[t._v("toUpperCase")]),t._v(" 的源码我们发现，这个看起来会修改 "),a("code",[t._v("String")]),t._v(" 值的方法，实际上最后是创建了一个全新的 "),a("code",[t._v("String")]),t._v(" 对象，而最初的 "),a("code",[t._v("String")]),t._v(" 对象则丝毫未动。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218165524.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"空串与-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空串与-null"}},[t._v("#")]),t._v(" 空串与 Null")]),t._v(" "),a("p",[t._v("空串 "),a("code",[t._v('""')]),t._v(" 很好理解，就是长度为 0 的字符串。可以调用以下代码检查一个字符串是否为空：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("或者")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("空串是一个 Java 对象")]),t._v("， 有自己的串长度（ 0 ) 和内容（空），也就是 "),a("code",[t._v("value")]),t._v(" 数组为空。")]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v("变量还可以存放一个特殊的值， 名为 "),a("code",[t._v("null")]),t._v("，这表示"),a("strong",[t._v("目前没有任何对象与该变量关联")]),t._v("。要检查一个字符串是否为 "),a("code",[t._v("null")]),t._v("，可如下判断：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有时要检查一个字符串既不是 "),a("code",[t._v("null")]),t._v("也不为空串，这种情况下就需要使用以下条件：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// todo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有同学就会觉得，这么简单的条件判断还用你说？没错，这虽然简单，但仍然有个小坑，就是我们"),a("strong",[t._v("必须首先检查 str 是否为 "),a("code",[t._v("null")]),t._v("，因为如果在一个 "),a("code",[t._v("null")]),t._v(" 值上调用方法，编译器会报错")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"字符串拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串拼接"}},[t._v("#")]),t._v(" 字符串拼接")]),t._v(" "),a("p",[t._v("上面既然说到 "),a("code",[t._v("String")]),t._v(" 是不可变的，我们来看段代码，为什么这里的字符串 a 却发生了改变？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// a = "helloworld"')]),t._v("\n")])])]),a("p",[t._v("实际上，在使用 "),a("code",[t._v("+")]),t._v(" 进行字符串拼接的时候，JVM 是初始化了一个 "),a("code",[t._v("StringBuilder")]),t._v(" 来进行拼接的。相当于编译后的代码如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("关于 "),a("code",[t._v("StringBuilder")]),t._v(" 下文会详细讲解，大家现在只需要知道 "),a("code",[t._v("StringBuilder")]),t._v(" 是可变的字符串类型就 OK 了。我们看下 "),a("code",[t._v("builder.toString()")]),t._v(" 的源码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218174109.png",alt:""}})]),t._v(" "),a("p",[t._v("显然，"),a("code",[t._v("toString")]),t._v("方法同样是生成了一个新的 "),a("code",[t._v("String")]),t._v(" 对象，而不是在旧字符串的内容上做更改，相当于把旧字符串的引用指向的新的"),a("code",[t._v("String")]),t._v("对象。这也就是字符串 "),a("code",[t._v("a")]),t._v(" 发生变化的原因。")]),t._v(" "),a("p",[t._v("另外，我们还需要了解一个特性，当将一个字符串与一个非字符串的值进行拼接时，后者被自动转换成字符串（"),a("strong",[t._v("任何一个 Java 对象都可以转换成字符串")]),t._v("）。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" rating "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PG"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// rating = "PG13"')]),t._v("\n")])])]),a("p",[t._v("这种特性通常用在输出语句中。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a = "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结合上面这两特性，我们来看个小问题，"),a("strong",[t._v("空串和 "),a("code",[t._v("null")]),t._v(" 拼接的结果是啥")]),t._v("？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("答案是 "),a("code",[t._v("null")]),t._v(" 大家应该都能猜出来，但为什么是 "),a("code",[t._v("null")]),t._v(" 呢？上文说过，使用 "),a("code",[t._v("+")]),t._v(" 进行拼接实际上是会转换为 "),a("code",[t._v("StringBuilder")]),t._v(" 使用 "),a("code",[t._v("append")]),t._v(" 方法进行拼接，编译后的代码如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("看下 "),a("code",[t._v("append")]),t._v(" 的源码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218175045.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看出，当传入的字符串是 "),a("code",[t._v("null")]),t._v(" 时，会调用 "),a("code",[t._v("appendNull")]),t._v(" 方法，而这个方法会返回 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"检测字符串是否相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检测字符串是否相等"}},[t._v("#")]),t._v(" 检测字符串是否相等")]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("equals")]),t._v("方法检测两个字符串是否相等。比如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[a("code",[t._v("equals")]),t._v(" 其实是 "),a("code",[t._v("Object")]),t._v(" 类中的一个方法，所有的类都继承于 "),a("code",[t._v("Object")]),t._v(" 类。讲解 "),a("code",[t._v("equals")]),t._v(" 方法之前，我们先来回顾一下运算符 "),a("code",[t._v("==")]),t._v(" 的用法，它存在两种使用情况：")]),t._v(" "),a("ul",[a("li",[t._v("对于基本数据类型来说， "),a("code",[t._v("==")]),t._v(" 比较的是值是否相同；")]),t._v(" "),a("li",[t._v("对于引用数据类型来说， "),a("code",[t._v("==")]),t._v(" 比较的是内存地址是否相同。")])]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("对 Java 中数据存储区域仍然不明白的可以先回去看看第一章《万物皆对象》。对于上述代码，str1 和 str2 采用构造函数 "),a("code",[t._v("new String()")]),t._v(" 的方式新建了两个不同字符串，以 "),a("code",[t._v('String str1 = new String("hello");')]),t._v(" 为例，new 出来的对象存放在堆内存中，用一个引用 str1 来指向这个对象的地址，而这个对象的引用 str1 存放在栈内存中。str1 和 str2 是两个不同的对象，地址不同，因此 "),a("code",[t._v("==")]),t._v(" 比较的结果也就为 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218203257.png",alt:""}})]),t._v(" "),a("p",[t._v("而实际上，"),a("code",[t._v("Object")]),t._v(" 类中的原始 "),a("code",[t._v("equals")]),t._v(" 方法内部调用的还是运算符 "),a("code",[t._v("==")]),t._v("，"),a("strong",[t._v("判断的是两个对象是否具有相同的引用（地址），和 "),a("code",[t._v("==")]),t._v(" 的效果是一样的")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218194515.png",alt:""}})]),t._v(" "),a("p",[t._v("也就是说，如果你新建的类没有覆盖 "),a("code",[t._v("equals")]),t._v(" 方法，那么这个方法比较的就是对象的地址。而 "),a("code",[t._v("String")]),t._v(" 方法覆盖了 "),a("code",[t._v("equals")]),t._v(" 方法，我们来看下源码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218194256.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看出，"),a("code",[t._v("String")]),t._v(" 重写的 "),a("code",[t._v("equals")]),t._v(" 方法比较的是对象的内容，而非地址。")]),t._v(" "),a("p",[t._v("总结下 "),a("code",[t._v("equals()")]),t._v("的两种使用情况：")]),t._v(" "),a("ul",[a("li",[t._v("情况 1："),a("u",[t._v("类没有覆盖 "),a("code",[t._v("equals()")]),t._v(" 方法")]),t._v("。则通过 "),a("code",[t._v("equals()")]),t._v(" 比较该类的两个对象时，等价于通过 "),a("code",[t._v("==")]),t._v(" 比较这两个对象（比较的是地址）。")]),t._v(" "),a("li",[t._v("情况 2："),a("u",[t._v("类覆盖了 "),a("code",[t._v("equals()")]),t._v(" 方法")]),t._v("。一般来说，我们都覆盖 "),a("code",[t._v("equals()")]),t._v(" 方法来判断两个对象的内容是否相等，比如 "),a("code",[t._v("String")]),t._v(" 类就是这样做的。当然，你也可以不这样做。")])]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 为一个字符串引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b 为另一个字符串引用,这俩对象的内容一样")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aEQb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false，不是同一个对象，地址不同")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a==b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池"}},[t._v("#")]),t._v(" 字符串常量池")]),t._v(" "),a("p",[t._v("字符串 "),a("code",[t._v("String")]),t._v(" 既然作为 "),a("code",[t._v("Java")]),t._v(" 中的一个类，那么它和其他的对象分配一样，需要耗费高昂的时间与空间代价，作为最基础最常用的数据类型，大量频繁的创建字符串，将会极大程度的影响程序的性能。为此，JVM 为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化：")]),t._v(" "),a("ul",[a("li",[t._v("为字符串开辟了一个"),a("strong",[t._v("字符串常量池 String Pool")]),t._v("，可以理解为缓存区")]),t._v(" "),a("li",[t._v("创建字符串常量时，首先检查字符串常量池中是否存在该字符串")]),t._v(" "),a("li",[a("strong",[t._v("若字符串常量池中存在该字符串，则直接返回该引用实例，无需重新实例化")]),t._v("；若不存在，则实例化该字符串并放入池中。")])]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("printl（"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str1 == str2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true ")]),t._v("\n")])])]),a("p",[t._v("对于上面这段代码，"),a("code",[t._v('String str1 = "hello";')]),t._v("， "),a("strong",[t._v("编译器首先会在栈中创建一个变量名为 "),a("code",[t._v("str1")]),t._v(' 的引用，然后在字符串常量池中查找有没有值为 "hello" 的引用，如果没找到，就在字符串常量池中开辟一个地址存放 "hello" 这个字符串，然后将引用 '),a("code",[t._v("str1")]),t._v(' 指向 "hello"')]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218204914.png",alt:""}})]),t._v(" "),a("p",[t._v("需要注意的是，字符串常量池的位置在 JDK 1.7 有所变化：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("JDK 1.7 之前")]),t._v("，字符串常量池存在于"),a("strong",[t._v("常量存储")]),t._v("（Constant storage）中")]),t._v(" "),a("li",[a("strong",[t._v("JDK 1.7 之后")]),t._v("，字符串常量池存在于"),a("strong",[t._v("堆内存")]),t._v("（Heap）中。")])]),t._v(" "),a("img",{staticStyle:{},attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20200906113117.png"}}),t._v(" "),a("p",[t._v("另外，我们还"),a("strong",[t._v("可以使用 "),a("code",[t._v("String")]),t._v("的 "),a("code",[t._v("intern()")]),t._v("方法在运行过程中手动的将字符串添加到 String Pool 中")]),t._v("。具体过程是这样的：")]),t._v(" "),a("p",[t._v("当一个字符串调用 "),a("code",[t._v("intern()")]),t._v(" 方法时，如果 String Pool 中已经存在一个字符串和该字符串的值相等，那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。")]),t._v(" "),a("p",[t._v("看下面这个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" str4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("对于 str3 来说，"),a("code",[t._v("str1.intern()")]),t._v(" 会先在 String Pool 中查看是否已经存在一个字符串和 str1 的值相等，没有，于是，在 String Pool 中添加了一个新的值和 str1 相等的字符串，并返回这个新字符串的引用。")]),t._v(" "),a("p",[t._v("而对于 str4 来说，"),a("code",[t._v("str1.intern()")]),t._v("在 String Pool 中找到了一个字符串和 str1 的值相等，于是直接返回这个字符串的引用。因此 s3 和 s4 引用的是同一个字符串，也就是说它们的地址相同，所以 "),a("code",[t._v("str3 == str4")]),t._v(" 的结果是 "),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218204412.png",alt:""}})]),t._v(" "),a("p",[t._v("🚩 "),a("strong",[t._v("总结：")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v('String str = "i"')]),t._v(" 的方式，java 虚拟机会自动将其分配到常量池中；")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("String str = new String(“i”)")]),t._v(" 则会被分到堆内存中。可通过 intern 方法手动加入常量池")])])]),t._v(" "),a("h3",{attrs:{id:"new-string-hello-创建了几个字符串对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-string-hello-创建了几个字符串对象"}},[t._v("#")]),t._v(' new String("hello") 创建了几个字符串对象')]),t._v(" "),a("p",[t._v("下面这行代码到底创建了几个字符串对象？仅仅只在堆中创建了一个？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("p",[t._v("显然不是。对于 str1 来说，"),a("code",[t._v('new String("hello")')]),t._v(" 分两步走：")]),t._v(" "),a("ul",[a("li",[t._v('首先，"hello" 属于字符串字面量，因此编译时期会在 String Pool 中查找有没有值为 "hello" 的引用，如果没找到，就在字符串常量池中开辟地址空间创建一个字符串对象，指向这个 "hello" 字符串字面量；')]),t._v(" "),a("li",[t._v("然后，使用 "),a("code",[t._v("new")]),t._v("的方式又会在堆中创建一个字符串对象。")])]),t._v(" "),a("p",[t._v('因此，使用这种方式一共会创建两个字符串对象（前提是 String Pool 中还没有 "hello" 字符串对象）。')]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218205909.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_2-双生子-可变的-stringbuffer-和-stringbuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-双生子-可变的-stringbuffer-和-stringbuilder"}},[t._v("#")]),t._v(" 2. 双生子：可变的 StringBuffer 和 StringBuilder")]),t._v(" "),a("h3",{attrs:{id:"string-字符串拼接问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串拼接问题"}},[t._v("#")]),t._v(" String 字符串拼接问题")]),t._v(" "),a("p",[t._v("有些时候， 需要由较短的字符串构建字符串， 例如， 按键或来自文件中的单词。采用字符串拼接的方式达到此目的效率比较低。由于 String 类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。既耗时， 又浪费空间。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段简单的代码其实总共产生了三个字符串，即 "),a("code",[t._v('"Hello"')]),t._v("、"),a("code",[t._v('"World"')]),t._v(" 和 "),a("code",[t._v('"HelloWorld"')]),t._v('。"Hello" 和 "World" 作为字符串常量会在 String Pool 中被创建，而拼接操作 '),a("code",[t._v("+")]),t._v(' 会 new 一个对象用来存放 "HelloWorld"。')]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("StringBuilder/ StringBuffer")]),t._v(" 类就可以避免这个问题的发生，毕竟 String 的 "),a("code",[t._v("+")]),t._v(" 操作底层都是由 "),a("code",[t._v("StringBuilder")]),t._v(" 实现的。"),a("code",[t._v("StringBuilder")]),t._v(" 和 "),a("code",[t._v("StringBuffer")]),t._v(" 拥有相同的父类：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cs-wiki.oss-cn-shanghai.aliyuncs.com/img/20210218211329.png",alt:""}})]),t._v(" "),a("p",[t._v("但是，"),a("code",[t._v("StringBuilder")]),t._v(" 不是线程安全的，在多线程环境下使用会出现数据不一致的问题，而 "),a("code",[t._v("StringBuffer")]),t._v(" 是线程安全的。这是因为在 "),a("code",[t._v("StringBuffer")]),t._v(" 类内，常用的方法都使用了"),a("code",[t._v("synchronized")]),t._v(" 关键字进行同步，所以是线程安全的。而 "),a("code",[t._v("StringBuilder")]),t._v(" 并没有。这也是运行速度 "),a("code",[t._v("StringBuilder")]),t._v(" 大于 "),a("code",[t._v("StringBuffer")]),t._v(" 的原因了。因此，如果在单线程下，优先考虑使用 "),a("code",[t._v("StringBuilder")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"初始化操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化操作"}},[t._v("#")]),t._v(" 初始化操作")]),t._v(" "),a("p",[a("code",[t._v("StringBuilder")]),t._v(" 和 "),a("code",[t._v("StringBuffer")]),t._v(" 这两个类的 API 是相同的，这里就以 "),a("code",[t._v("StringBuilder")]),t._v("  为例演示其初始化操作。")]),t._v(" "),a("p",[a("code",[t._v("StringBuiler/StringBuffer")]),t._v("不能像 "),a("code",[t._v("String")]),t._v(" 那样直接用字符串赋值，所以也不能那样初始化。它"),a("strong",[t._v("需要通过构造方法来初始化")]),t._v("。首先， 构建一个空的字符串构建器：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),t._v(" builder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("当每次需要添加一部分内容时， 就调用 "),a("code",[t._v("append")]),t._v(" 方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ert"')]),t._v("\nbuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在需要构建字符串 "),a("code",[t._v("String")]),t._v(" 时调用  "),a("code",[t._v("toString")]),t._v(" 方法， 就能得到一个 "),a("code",[t._v("String")]),t._v("对象：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" mystr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" builder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aert")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-string、stringbuffer、stringbuilder-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-string、stringbuffer、stringbuilder-比较"}},[t._v("#")]),t._v(" 3. String、StringBuffer、StringBuilder 比较")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("可变性")]),t._v(" "),a("th",[t._v("线程安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("String")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("不可变")]),t._v(" "),a("td",[t._v("因为不可变，所以是线程安全的")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("StringBuffer")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可变")]),t._v(" "),a("td",[t._v("线程安全的，因为其内部大多数方法都使用 "),a("code",[t._v("synchronized")]),t._v("进行同步。其效率较低")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("StringBuilder")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可变")]),t._v(" "),a("td",[t._v("不是线程安全的，因为没有使用 "),a("code",[t._v("synchronized")]),t._v("进行同步，这也是其效率高于 StringBuffer  的原因。单线程下，优先考虑使用 StringBuilder。")])])])]),t._v(" "),a("p",[t._v("关于 "),a("code",[t._v("synchronized")]),t._v(" 保证线程安全的问题，我们后续文章再说。")]),t._v(" "),a("h2",{attrs:{id:"📚-references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#📚-references"}},[t._v("#")]),t._v(" 📚 References")]),t._v(" "),a("ul",[a("li",[t._v("《Java 核心技术 - 卷 1 基础知识 - 第 10 版》")]),t._v(" "),a("li",[t._v("《Thinking In Java（Java 编程思想）- 第 4 版》")])])])}),[],!1,null,null,null);s.default=e.exports}}]);